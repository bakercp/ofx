#!/usr/bin/env bash
#
# Copyright (c) 2019 Christopher Baker <https://christopherbaker.net>
#
# SPDX-License-Identifier:	MIT
#

set -e

#set -x # run script in debug mode
set -o pipefail  # Trace ERR through pipes.
set -o errtrace  # Trace ERR through 'time command' and other functions.
set -o nounset   # set -u : exit the script if you try to use an uninitialized variable.
set -o errexit   # set -e : exit the script if any statement returns a non-true return value.

# Helpful env variables.
DEFAULT_CLONE_DEPTH=1
# export MAKEFLAGS="-s"

# Trap the killer signals so that we can exit with a good message
trap "trapSignal SIGHUP" SIGHUP
trap "trapSignal SIGINT" SIGINT
trap "trapSignal SIGTERM" SIGTERM

trapSignal() { echo; echoError " Received signal $1"; exit 1; }

# trap any script errors and exit
trap "trapError" ERR

trapError() { echo; echoError " ^ Received error ^"; exit 1; }

# Include the Functions.
source "$( dirname "${BASH_SOURCE[0]}" )/lib/functions.sh"


function list_commands()
{
  echo "ci bootstrap clean generate install list run update"
}

function list_parameters_for_command()
{
  case "$1" in
    ci)
      echo "install script"
      ;;
    clean)
      echo "all apothecary example_project_files filesystem test_project_files example_build_files test_build_files projects build"
      ;;
    install)
      echo "apothecary dependencies libraries openframeworks shared_data example_data test_data"
      ;;
    bootstrap)
      echo ""
      ;;
    list)
      echo "addon_dependencies dependencies examples tests"
      ;;
    generate)
      echo "all examples tests"
      ;;
    build)
      echo "all documentation examples tests"
      ;;
    run)
      echo "all examples tests"
      ;;
    update)
      echo "boilerplate"
      ;;
  esac
}

JOBS=$(get_max_number_of_jobs)

# Force an action that is prevented by default.
FORCE=false

function make_command_parameter_list()
{
  for command in $(list_commands)
  do
    echo "  $command"
    params=$(list_parameters_for_command ${command})
    echo "    - ${params:-N/A}"
  done
}

HELP="${CON_YELLOW_BOLD_UNDERLINE}USAGE${CON_DEFAULT}: ${CON_YELLOW}ofx${CON_DEFAULT} [options] <command> [command parameters] <addon>

${CON_YELLOW}about${CON_DEFAULT}:
 This is ofx, the openFrameworks addons multi-tool.
${CON_YELLOW}options${CON_DEFAULT}:
  -j The number of jobs (cores) used when compiling.
  -t The target platform.
  -p The Project Generator command-line app path.
  -o The openFrameworks root path.
  -f Force an action that is prevented by default.
  -h or -? Print this usage guide.
  -v Verbosity level.
      -v    Print variables.
      -vv   Print variables, show program output.
      -vv   Print variables, show program output.
      -vvv  Print variables, show program output, build output.
      -vvvv Print variables, show program output, build output, set -v for bash output.
${CON_YELLOW}commands${CON_DEFAULT}:
  $(list_commands)
${CON_YELLOW}command parameters${CON_DEFAULT}:
$(make_command_parameter_list)
${CON_YELLOW}addon${CON_DEFAULT}:
  Addon Name - The name of an addon in the openFrameworks/addons directory.
    ofxAddon
  Addon Path - The relative or absolute path of an addon.
    /openFrameworks/app/project/local_addons/ofxAddon
${CON_YELLOW}examples${CON_DEFAULT}:
  ./ofx bootstrap ofxAddon
${CON_YELLOW}more info${CON_DEFAULT}:
  https://github.com/bakercp/ofx
"




# Tutorial: https://wiki.bash-hackers.org/howto/getopts_tutorial

# A POSIX variable
OPTIND=1 # Reset in case getopts has been used previously in the shell.

# When a colon is after an character, that character expects an argument.
while getopts j:p:t:o:fhv opt ; do
  case "$opt" in
    j) JOBS=$OPTARG ; ;;
    p) OF_PROJECT_GENERATOR_BIN_PATH=$OPTARG ; ;;
    t) TARGET_PLATFORM=$OPTARG ; ;;
    o) OF_ROOT=$OPTARG ; ;;
    f) FORCE=true ; ;;
    h|\?) echo -e "$HELP" ; exit 1 ;;
    v) LOG_LEVEL=$((LOG_LEVEL+1)) ;;
  esac
done
shift "$((OPTIND-1))"

if [ $LOG_LEVEL -gt 3 ]; then
  set -v
fi

# Determine the platform being used.
HOST_PLATFORM=${HOST_PLATFORM:-$(os)}
TARGET_PLATFORM=${TARGET_PLATFORM:-$(os)}

IS_LOCAL_ADDON=false

CI=${CI:-false}
APPVEYOR=${APPVEYOR:-false}
TRAVIS=${TRAVIS:-false}

function initialize_variables() {
  if [ "$CI" == "true" ]; then
    OF_ROOT=${OF_ROOT:-~/openFrameworks}
    if [ "$APPVEYOR" == "true" ]; then
      THIS_ADDON_NAME=${APPVEYOR_PROJECT_SLUG#*/}
      THIS_USERNAME=${APPVEYOR_PROJECT_SLUG%/*}
      THIS_BRANCH=${APPVEYOR_REPO_BRANCH}
    elif [ "$TRAVIS" == "true" ]; then
      THIS_ADDON_NAME=${TRAVIS_REPO_SLUG#*/}
      THIS_USERNAME=${TRAVIS_REPO_SLUG%/*}
      THIS_BRANCH=${TRAVIS_BRANCH}
    fi
  else
    OF_ROOT=${OF_ROOT:-$(cd "$( dirname "${BASH_SOURCE[0]}" )/../../" && pwd)}

    TARGET_ADDON_PATH_ABS=$(get_abs_filename ${TARGET_ADDON_PATH})
    THIS_ADDON_NAME=${TARGET_ADDON_PATH_ABS##*/}
    THIS_USERNAME=$(whoami)
    THIS_BRANCH=$(git rev-parse --abbrev-ref HEAD)

    if [ -d ${TARGET_ADDON_PATH_ABS} ]; then
      ADDON_PARENT_DIRECTORY=$(basename "$(cd "$( dirname "${TARGET_ADDON_PATH_ABS}" )" && pwd)")
      if [ "${ADDON_PARENT_DIRECTORY}" == "local_addons" ]; then
        THIS_ADDON_PATH=${TARGET_ADDON_PATH_ABS}
        IS_LOCAL_ADDON=true
      fi
    elif [[ ${TARGET_ADDON_PATH} != ofx* ]]; then
      echoError "Unable to resolve addon: ${TARGET_ADDON_PATH}"
      exit 1
    fi
  fi

  # OF paths.
  OF_ADDONS_PATH=${OF_ADDONS_PATH:-${OF_ROOT}/addons}
  OF_SCRIPTS_PATH=${OF_SCRIPTS_PATH:-${OF_ROOT}/scripts}
  OF_APOTHECARY_PATH=${OF_APOTHECARY_PATH:-${OF_SCRIPTS_PATH}/apothecary}

  # Addon paths.
  THIS_ADDON_PATH=${THIS_ADDON_PATH:-${OF_ADDONS_PATH}/${THIS_ADDON_NAME}}
  THIS_ADDON_SHARED_PATH=${THIS_ADDON_SHARED_PATH:-${THIS_ADDON_PATH}/shared}
  THIS_ADDON_SHARED_DATA_PATH=${THIS_ADDON_SHARED_DATA_PATH:-${THIS_ADDON_SHARED_PATH}/data}
  THIS_ADDON_SCRIPTS_PATH=${THIS_ADDON_SCRIPTS_PATH:-${THIS_ADDON_PATH}/scripts}
  THIS_ADDON_DOCUMENTATION_PATH=${THIS_ADDON_DOCUMENTATION_PATH:-${THIS_ADDON_PATH}/docs}

  # OF Clone info.
  OF_CLONE_DEPTH=${OF_CLONE_DEPTH:-${DEFAULT_CLONE_DEPTH}}
  OF_CLONE_BRANCH=${OF_CLONE_BRANCH:-${THIS_BRANCH}}
  OF_CLONE_USERNAME=${OF_CLONE_USERNAME:-openFrameworks}

  # Addon Clone info.
  ADDON_CLONE_DEPTH=${ADDON_CLONE_DEPTH:-${DEFAULT_CLONE_DEPTH}}
  ADDON_CLONE_BRANCH=${ADDON_CLONE_BRANCH:-${THIS_BRANCH}}
  ADDON_CLONE_USERNAME=${ADDON_CLONE_USERNAME:-${THIS_USERNAME}}

  # Project generator info.

  if [ "${HOST_PLATFORM}" == "osx" ]; then
    OF_PROJECT_GENERATOR_PATH=${OF_PROJECT_GENERATOR_PATH:-$OF_ROOT/projectGenerator_${HOST_PLATFORM}}
  else
    OF_PROJECT_GENERATOR_PATH=${OF_PROJECT_GENERATOR_PATH:-$OF_ROOT/projectGenerator-${HOST_PLATFORM}}
  fi

  if [ -z ${OF_PROJECT_GENERATOR_BIN_PATH+x} ]; then
      if [ "${HOST_PLATFORM}" == "osx" ]; then
        OF_PROJECT_GENERATOR_BIN_PATH=${OF_PROJECT_GENERATOR_PATH}/projectGenerator.app/Contents/Resources/app/app
      else
        OF_PROJECT_GENERATOR_BIN_PATH=${OF_PROJECT_GENERATOR_PATH}/resources/app/app
      fi
  fi

  OF_PROJECT_GENERATOR_BIN=projectGenerator
  OF_PROJECT_GENERATOR_COMMAND=${OF_PROJECT_GENERATOR_BIN_PATH}/./${OF_PROJECT_GENERATOR_BIN}

  if [ -f ${OF_PROJECT_GENERATOR_COMMAND} ]; then
    OF_PROJECT_GENERATOR_AVAILABLE=true
  else
    OF_PROJECT_GENERATOR_AVAILABLE=false
  fi

  EXAMPLE_PROJECTS=${THIS_ADDON_PATH}/example*
  TEST_PROJECTS=${THIS_ADDON_PATH}/tests
  ALL_PROJECTS=${THIS_ADDON_PATH}

  if [ $LOG_LEVEL -gt 0 ]; then
    echo "================================================================================"
    echo ""
    echo "                          IS_LOCAL_ADDON: ${IS_LOCAL_ADDON}"
    echo "                           HOST_PLATFORM: ${HOST_PLATFORM}"
    echo "                         TARGET_PLATFORM: ${TARGET_PLATFORM}"
    echo ""
    echo "                                      CI: ${CI}"
    echo "                                APPVEYOR: ${APPVEYOR}"
    echo "                                  TRAVIS: ${TRAVIS}"
    echo ""
    echo "                                 OF_ROOT: ${OF_ROOT}"
    echo "                          OF_ADDONS_PATH: ${OF_ADDONS_PATH}"
    echo "                         OF_SCRIPTS_PATH: ${OF_SCRIPTS_PATH}"
    echo "                      OF_APOTHECARY_PATH: ${OF_APOTHECARY_PATH}"
    echo "               OF_PROJECT_GENERATOR_PATH: ${OF_PROJECT_GENERATOR_PATH}"
    echo "           OF_PROJECT_GENERATOR_BIN_PATH: ${OF_PROJECT_GENERATOR_BIN_PATH}"
    echo "                OF_PROJECT_GENERATOR_BIN: ${OF_PROJECT_GENERATOR_BIN}"
    echo "          OF_PROJECT_GENERATOR_AVAILABLE: ${OF_PROJECT_GENERATOR_AVAILABLE}"
    echo ""
    echo "                         THIS_ADDON_NAME: ${THIS_ADDON_NAME}"
    echo "                         THIS_ADDON_PATH: ${THIS_ADDON_PATH}"
    echo "             THIS_ADDON_SHARED_DATA_PATH: ${THIS_ADDON_SHARED_DATA_PATH}"
    echo "                 THIS_ADDON_SCRIPTS_PATH: ${THIS_ADDON_SCRIPTS_PATH}"
    echo ""
    echo "                           THIS_USERNAME: ${THIS_USERNAME}"
    echo "                             THIS_BRANCH: ${THIS_BRANCH}"
    echo ""
    echo "                          OF_CLONE_DEPTH: ${OF_CLONE_DEPTH}"
    echo "                         OF_CLONE_BRANCH: ${OF_CLONE_BRANCH}"
    echo "                       OF_CLONE_USERNAME: ${OF_CLONE_USERNAME}"
    echo ""
    echo "                       ADDON_CLONE_DEPTH: ${ADDON_CLONE_DEPTH}"
    echo "                      ADDON_CLONE_BRANCH: ${ADDON_CLONE_BRANCH}"
    echo "                    ADDON_CLONE_USERNAME: ${ADDON_CLONE_USERNAME}"
    echo ""
    echo "                                    JOBS: ${JOBS}"
    echo "                               LOG_LEVEL: ${LOG_LEVEL}"
    echo ""
    echo "                         EXAMPLE_PROJECTS: ${EXAMPLE_PROJECTS}"
    echo "                            TEST_PROJECTS: ${TEST_PROJECTS}"
    echo "                             ALL_PROJECTS: ${ALL_PROJECTS}"
    echo "================================================================================"
  fi

  for DIR in ${OF_ROOT} ${OF_ADDONS_PATH} ${OF_SCRIPTS_PATH}
  do
    if [ ! -d ${DIR} ]; then
      echoError "${DIR} does not exist. Is ofx installed in the openFrameworks/scripts/ofx directory or is the -o flag set to the openFrameworks directory?"
      exit 1
    fi
  done
}

# Include the Helpers.
source "$(dirname "${BASH_SOURCE[0]}")/lib/apothecary_helper.sh"
source "$(dirname "${BASH_SOURCE[0]}")/lib/project_helper.sh"
source "$(dirname "${BASH_SOURCE[0]}")/lib/dependency_helper.sh"

# Clone the list of addons and check to make sure all dependencies are satisfied and cloned.
function clone_addons()
{
  for addon in "$@"
  do
    if [ ! -d ${OF_ADDONS_PATH}/${addon} ]; then
      echoInfo "Installing" "addon" "${OF_ADDONS_PATH}/${addon}"


      pushd ${OF_ADDONS_PATH}/${addon} > /dev/null

      if ! git checkout ${ADDON_CLONE_BRANCH}; then
        if ! git checkout master; then
          if ! git checkout stable; then
            echoError "Unable to check out ${ADDON_CLONE_BRANCH}, master or stable branch for https://github.com/${ADDON_CLONE_USERNAME}/${addon}.git."
            exit 1
          fi
        fi
      fi

      popd > /dev/null

      # Bootstrap addon if needed.
      if [ -f ${OF_ADDONS_PATH}/${addon}/scripts/boostrap.sh ]; then
        pushd ${OF_ADDONS_PATH}/${addon} > /dev/null
        /usr/bin/env bash scripts/boostrap.sh
        popd > /dev/null
      else
        # TODO, more complete bootstrap.
        install_libraries "${addon}" "${OF_ADDONS_PATH}/${addon}"
      fi

      local _REQUIRED_ADDONS=$(get_addon_dependencies_for_addon ${OF_ADDONS_PATH}/${addon})

      for required_addon in ${_REQUIRED_ADDONS}
      do
        if [ ! -d ${OF_ADDONS_PATH}/${required_addon} ]; then
          clone_addons ${required_addon}
        else
          echoSuccess "Dependency satisfied: ${required_addon}"
        fi
      done
    else
      echoSuccess "Dependency satisfied ${addon} by: ${OF_ADDONS_PATH}/${addon}"
    fi
  done
  return 0
}


# Extract ADDON_DEPENDENCIES from an addon's addon_config.mk file.
function get_addon_dependencies_from_addon_config_mk()
{
  if [ -f ${THIS_ADDON_PATH}/addon_config.mk ]; then
    local ADDON_DEPENDENCIES=""
    while read line; do
      if [[ $line == ADDON_DEPENDENCIES* ]] ;
      then
        line=${line#*=}
        IFS=' ' read -ra ADDR <<< "$line"
        for i in "${ADDR[@]}"; do
          ADDON_DEPENDENCIES="${ADDON_DEPENDENCIES} ${i}"
        done
      fi
    done < ${THIS_ADDON_PATH}/addon_config.mk
    echo $(sort_and_remove_duplicates "${ADDON_DEPENDENCIES}")
  fi
  return 0
}


# Extract ADDON_DEPENDENCIES from an project's addons.make files.
function get_addon_dependencies_from_project()
{
  local ADDON_DEPENDENCIES=""
  while read addon; do
    ADDON_DEPENDENCIES="${ADDON_DEPENDENCIES} ${addon}"
  done < "${1}"/addons.make
  echo $(sort_and_remove_duplicates "${ADDON_DEPENDENCIES}")
  return 0
}


function get_addon_dependencies_from_all_projects()
{
  echo $(sort_and_remove_duplicates "$(get_addon_dependencies_from_all_examples) $(get_addon_dependencies_from_all_tests)")
  return 0
}


function get_all_addon_dependencies()
{
  echo $(sort_and_remove_duplicates "$(get_addon_dependencies_from_addon_config_mk) $(get_addon_dependencies_from_all_projects)")
  return 0
}


function install_dependencies()
{
  echoInfo "Installing" "Dependencies"
  (clone_addons $(get_all_addon_dependencies))
}


function install_shared_data()
{
  echoInfo "Installing" "Shared Data"

  if [ -d ${THIS_ADDON_SHARED_DATA_PATH} ] ; then
    for script in ${THIS_ADDON_SHARED_DATA_PATH}/*.sh; do
      echoInfo "Installing ${script}"
      /usr/bin/env bash ${script}
    done
  fi
}


function install_data_for_project()
{
    local PROJECT_PATH="$1"
    local did_install=false
    if [ -f ${PROJECT_PATH}/bin/data/data.txt ] ; then
      data_file=${PROJECT_PATH}/bin/data/data.txt

      did_install=true
      # For the project data path.
      THIS_PROJECT_BIN_DATA_PATH=$(dirname "${data_file}")

      # The || [ -n "$line" ]; is to help when the last line isn't a new line char.
      while read line || [ -n "$line" ];
      do
        # Make sure the data doesn't start with a comment hash #
        # Make sure that it isn't am empty line.
        if [ "${line:0:1}" != "#"  ] && [ -n "${line// }" ]; then
          IFS=' ' read -r -a tokens <<< "${line}" # Parse the tokens.
          SRC=${tokens[0]} # Get the source location.
          DST=${tokens[1]:-""} # Get the destination location, or nothing if missing.

          if ! [[ ${SRC} == http* ]]; then
            if [[ ${SRC} == /* ]]; then
              SRC_PATH=${SRC}
            else
              SRC_PATH=${THIS_ADDON_SHARED_DATA_PATH}/${SRC}
            fi

            if [[ -z ${DST} ]]; then
              if [[ ${SRC} == /* ]]; then
                DST_PATH=${THIS_PROJECT_BIN_DATA_PATH}/$(basename "${SRC}")
              else
                DST_PATH=${THIS_PROJECT_BIN_DATA_PATH}/${SRC}
              fi
            else
              DST_PATH=${THIS_PROJECT_BIN_DATA_PATH}/${DST}
            fi

            if ! [ -e ${DST_PATH} ]; then
              if ! [ -e ${SRC_PATH} ]; then
                echoError "${SRC_PATH} does not exist. Did you install the shared data?"
                continue
              fi

              mkdir -p "$(dirname "${DST_PATH}")"
              pushd "$(dirname "${DST_PATH}")" > /dev/null

              REL_SRC_PATH=$(relpath ${SRC_PATH} .)
              REL_DST_PATH=$(relpath ${DST_PATH} .)

              #rsync -Pvqar ${SRC_PATH} ${DST_PATH}
              ln -s ${REL_SRC_PATH} ${REL_DST_PATH}
              popd > /dev/null
            fi

            echoSuccess "Linked" "${SRC} 👉 ${DST_PATH}"
          else
            if [[ -z ${DST} ]]; then
              DST=$(basename ${SRC})
            fi
            DST_PATH=${THIS_PROJECT_BIN_DATA_PATH}/${DST}
            if ! [ -e ${DST_PATH} ]; then
              curl --progress-bar --create-dirs -o ${DST_PATH} -L ${SRC}
            fi
            echoSuccess "Downloaded" "${SRC} 👉 ${DST_PATH}"
          fi
        fi
      done < ${data_file}
    fi

    if [ ${did_install} == "true" ]; then
      echoInfo "Installed data for" "${PROJECT_PATH#"${THIS_ADDON_PATH}/"}"
    else
      echoInfo "Nothing installed for" "${PROJECT_PATH#"${THIS_ADDON_PATH}/"}"
    fi
}


function list()
{
  case "$1" in
    addon_dependencies) shift 1; list_addon_dependencies "$@" ;;
    examples) shift 1; list_examples "$@" ;;
    tests) shift 1; list_tests "$@" ;;
    dependencies) shift 1; get_all_addon_dependencies "$@" ;;
    *)
      echoError "Unknown" "list" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "list")"
      exit 1 ;;
  esac
}


function clean_filesystem()
{
  (remove_os_files "$THIS_ADDON_PATH")
  (remove_empty_data_folders "$THIS_ADDON_PATH")
  (remove_empty_bin_folders "$THIS_ADDON_PATH")
}


function clean()
{
  case "$1" in
    all)
      shift 1
      clean_apothecary "$@"
      clean_example_project_files "$@"
      clean_test_project_files "$@"
      clean_example_build_files "$@"
      clean_test_build_files "$@"
      ;;
    apothecary) shift 1; clean_apothecary "$@" ;;
    filesystem) shift 1; clean_filesystem "$@" ;;
    example_project_files) shift 1; clean_example_project_files "$@" ;;
    test_project_files) shift 1; clean_test_project_files "$@" ;;
    example_build_files) shift 1; clean_example_build_files "$@" ;;
    test_build_files) shift 1; clean_example_build_files "$@" ;;
    projects)
      shift 1
      clean_example_project_files "$@"
      clean_test_project_files "$@"
      ;;
    build)
      shift 1
      clean_example_build_files "$@"
      clean_test_build_files "$@"
      ;;
    *)
      echoError "Unknown" "clean" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "clean")"
      exit 1 ;;
  esac
}


function install()
{
  case "$1" in
    apothecary) shift 1; install_apothecary "$@" ;;
    dependencies) shift 1; install_dependencies "$@" ;;
    libraries) shift 1; install_libraries "$@" ;;
    openframeworks) shift 1; install_openframeworks "$@" ;;
    shared_data) shift 1; install_shared_data "$@" ;;
    example_data) shift 1; install_example_data "$@" ;;
    test_data) shift 1; install_test_data "$@" ;;
    *)
      echoError "Unknown" "install" "target" ":\"$1\""
      echoError "valid: $(list_parameters_for_command "install")"
      exit 1;;
  esac
}


function generate_examples()
{
  (do_function_for_projects generate_project "${EXAMPLE_PROJECTS}" $@)
}


function generate_tests()
{
  (do_function_for_projects generate_project "${TEST_PROJECTS}" $@)
}


function generate_all()
{
  (generate_examples $@)
  (generate_tests $@)
}


function generate()
{
  case "$1" in
    all)
      shift 1
      generate_examples "$@"
      generate_tests "$@"
      ;;
    examples) shift 1; generate_examples "$@" ;;
    tests) shift 1; generate_tests "$@" ;;
    *)
      echoError "Unknown" "generate" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "generate")"
      exit 1;;
  esac
}


function build_examples()
{
  (do_function_for_projects build_project "${EXAMPLE_PROJECTS}" $@)
}


function build_tests()
{
  (do_function_for_projects build_project "${TEST_PROJECTS}" $@)
}

function build_all()
{
  (build_documentation $@)
  (build_examples $@)
  (build_tests $@)
}


function build_documentation()
{
  if [ -f ${THIS_ADDON_DOCUMENTATION_PATH}/Doxyfile ]; then
    pushd ${THIS_ADDON_DOCUMENTATION_PATH} > /dev/null

    # Download the tagfile for online cpp reference.
    curl --progress-bar -LO https://upload.cppreference.com/mwiki/images/f/f8/cppreference-doxygen-web.tag.xml

    cp Doxyfile Doxyfile_

    # Add links to online cpp documentation.
    echo "TAGFILES += \"cppreference-doxygen-web.tag.xml=http://en.cppreference.com/w/\"" >> Doxyfile_

    doxygen Doxyfile_
    touch html/.nojekyll
    popd > /dev/null
  fi
}

function build()
{
  case "$1" in
    all)
      shift 1
      build_all "$@"
      ;;
    documentation) shift 1; build_documentation "$@" ;;
    examples) shift 1; build_examples "$@" ;;
    tests) shift 1; build_tests "$@" ;;
    *)
      echoError "Unknown" "build" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "build")"
      exit 1;;
  esac
}


function run_examples()
{
  (do_function_for_projects run_project "${EXAMPLE_PROJECTS}" $@)
}


function run_tests()
{
  (do_function_for_projects run_project "${TEST_PROJECTS}" $@)
}

function run_all()
{
  (run_examples $@)
  (run_tests $@)
}

function run()
{
  case "$1" in
    all)
      shift 1
      run_all "$@"
      ;;
    examples) shift 1; run_examples "$@" ;;
    tests) shift 1; run_tests "$@" ;;
    *)
      echoError "Unknown" "run" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "run")"
      exit 1;;
  esac
}


function bootstrap()
{
  echoInfo "Bootstrapping" "${THIS_ADDON_NAME}"

  echo -e "\n\t👢 \033[31;1;4m/ˈbo͞otˌstrap/\033[0m - \"a technique of loading a program into a"
  echo -e "\tcomputer by means of a few initial instructions that enable "
  echo -e "\tthe introduction of the rest of the program from an input"
  echo -e "\tdevice.\"\n"

  install_apothecary
  install_libraries
  install_dependencies
  install_shared_data
  install_example_data
  install_test_data
  generate_all "force"
}


function ci_install()
{
  echoInfo "CI" "Install"

  # Check to see if we are running in a CI server / environment.
  if [ "${CI}" == "true" ]; then
    if [ "${TRAVIS}" == "true" ]; then

      echoInfo "Installing" "openFrameworks"
      if [ ! -d ${OF_ROOT} ]; then
          git clone --depth=${OF_CLONE_DEPTH} --branch=${OF_CLONE_BRANCH} https://github.com/${OF_CLONE_USERNAME}/openFrameworks.git ${OF_ROOT}
          pushd ${OF_ROOT} > /dev/null
          scripts/ci/addons/install.sh

          # After this, the cloned addon will be in $THIS_ADDON_PATH, so make a link.
          if [ ! -L ${THIS_ADDON_PATH} ]; then
            ln -s ${THIS_ADDON_PATH} ${TRAVIS_BUILD_DIR}
          fi

          popd > /dev/null
      else
          echoWarning "${OF_ROOT} already exists"
      fi
    fi
  fi
}


function ci_script()
{
  echoInfo "CI" "Run"

  # Run bootstrap (see above).
  bootstrap

  # Build all projects, including examples.
  build_examples
  build_tests

  # Run tests, but not examples as many examples require a window.
  run_tests
}


function ci()
{
  case "$1" in
    install)
      shift 1
      ci_install "$@"
      ;;
    script)
      shift 1
      ci_script "$@"
      ;;
    *)
      echoError "Unknown" "ci" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "ci")"
      exit 1;;
  esac
}

function update_boilerplate()
{
  echo "Updating boilerplate."

  if [ ! -d ${OF_ADDONS_PATH}/ofxAddon ]; then
    git clone https://github.com/bakercp/ofxAddon.git ${OF_ADDONS_PATH}/ofxAddon
  fi

  # The list of boilerplate files from ofxAddon
  local boilerplate_files=(
    .gitignore
    .travis.yml
    .github/FUNDING.yml
    .github/ISSUE_TEMPLATE.md
    .github/PULL_REQUEST_TEMPLATE.md
    docs/CODE_OF_CONDUCT.md
    docs/CONTRIBUTING.md
    docs/Doxyfile
    docs/GETTING_STARTED.md
    docs/SUPPORT.md
    docs/TROUBLESHOOTING.md
    scripts/bootstrap.sh
  )

  for file in boilerplate_files
  do
    local SRC_FILE=${OF_ADDONS_PATH}/ofxAddon/${file}
    local DST_FILE=${THIS_ADDON_PATH}/${file}




    # cp -i ${OF_ADDONS_PATH}/ofxAddon/${file} ${THIS_ADDON_PATH}/${file}
  done

}


function update()
{
  case "$1" in
    boilerplate)
      shift 1
      update_boilerplate "$@"
      ;;
    *)
      echoError "Unknown" "update" "target: \"$1\""
      echoError "valid: $(list_parameters_for_command "update")"
      exit 1;;
  esac
}


if [ $# -lt 2 ]; then
  echoError "A command and target addon are required arguments."
  echo -e "$HELP"
  exit 1
fi

# Get the last argument (this should be the targeted addon)
for arg in $@; do :; done
TARGET_ADDON_PATH=${arg}

# Now that we have the command and the addon, initialize variables.
initialize_variables



# Remove the last argument.
set -- "${@:1:$(($#-1))}"

# Get command.
COMMAND="$1"
shift 1

if [ "$COMMAND" != "bootstrap" ] && [ $# == 0 ]; then
    echoError "The \"$COMMAND\" command requires one of the following command parameter: $(list_parameters_for_command "$COMMAND")"
    exit 1
fi


# Handle Command
case "$COMMAND" in
  ci)
    ci "$@" ;;
  clean)
    clean "$@" ;;
  install)
    install "$@" ;;
  bootstrap)
    bootstrap "$@" ;;
  list)
    list "$@" ;;
  generate)
    generate "$@" ;;
  build)
    build "$@" ;;
  run)
    run "$@" ;;
  update)
    update "$@" ;;
  *)
    echoError "Unknown" "command" "\"$COMMAND\""
    exit 1 ;;
esac


exit 0
